<?php

namespace App\Services\Telegram\Handlers;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use App\Models\Word;

class WordHandler
{
    public function handle(array $message): void
    {
        $chatId = $message['chat']['id'];
        $text = trim($message['text'] ?? '');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        $editWordId = Cache::get("edit_word_{$chatId}");
        if ($editWordId) {
            if ($text === '') {
                $this->sendMessage($chatId, "‚ùóÔ∏è –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥.");
                return;
            }
            $word = Word::find($editWordId);
            if ($word) {
                $word->translation = $text;
                $word->save();
                $this->sendMessage($chatId, "‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞ <b>{$word->word}</b> –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>{$text}</b>", null, 'HTML');
            } else {
                $this->sendMessage($chatId, "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            }
            Cache::forget("edit_word_{$chatId}");
            return;
        }

        $exampleWordId = Cache::get("add_example_{$chatId}");
        if ($exampleWordId) {
            if (mb_strlen($text) < 5) {
                $this->sendMessage($chatId, "‚ùóÔ∏è –ü—Ä–∏–∫–ª–∞–¥ –º–∞—î –±—É—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª–∏–º —Ä–µ—á–µ–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
                return;
            }
            $word = Word::find($exampleWordId);
            if ($word) {
                $word->example = $text;
                $word->save();
                $this->sendMessage($chatId, "‚úÖ –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞ <b>{$word->word}</b> –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", null, 'HTML');
            } else {
                $this->sendMessage($chatId, "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            }
            Cache::forget("add_example_{$chatId}");
            return;
        }

        if ($text === 'üìÉ –ú–æ—ó —Å–ª–æ–≤–∞' || $text === '/mywords') {
            $words = Word::where('user_id', $chatId)->get();

            if ($words->isEmpty()) {
                $this->sendMessage($chatId, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤.");
            } else {
                // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –æ–∫—Ä–µ–º–æ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
                $this->sendWordsList($chatId, $words);
            }
            return;
        }

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º–∞—Ç "word - translation"
        if (str_contains($text, '-')) {
            [$wordText, $translation] = array_map('trim', explode('-', $text, 2));
            if ($wordText === '' || $translation === '') {
                $this->sendMessage($chatId, "‚ùóÔ∏è –§–æ—Ä–º–∞—Ç –Ω–µ–≤—ñ—Ä–Ω–∏–π. –ü—Ä–∏–∫–ª–∞–¥: <code>apple - —è–±–ª—É–∫–æ</code>", null, 'HTML');
                return;
            }
            Word::create([
                'user_id' => $chatId,
                'word' => $wordText,
                'translation' => $translation,
            ]);
            $this->sendMessage($chatId, "‚úÖ –î–æ–¥–∞–Ω–æ: {$wordText} ‚Äî {$translation}");
            return;
        }

        // –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–∫—Å—Ç
        $this->sendMessage($chatId, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ª–æ–≤–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–∫–ª–∞–¥ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.");
    }

    public function promptAddWord(array $message): void
    {
        $chatId = $message['chat']['id'];
        $text = "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ª–æ–≤–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ: ‚úÖ—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–∫–ª–∞–¥‚úÖ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.";
        $this->sendMessage($chatId, $text);
    }

    public function sendWordsList($chatId, $words)
    {
        foreach ($words as $word) {
            $this->sendWordWithButtons($chatId, $word);
        }
    }

    private function sendWordWithButtons($chatId, $word)
    {
        $token = env('TELEGRAM_BOT_TOKEN');
        $url = "https://api.telegram.org/bot{$token}/sendMessage";

        $text = "<b>{$word->word}</b> ‚Äî {$word->translation}";
        if ($word->example) {
            $text .= "\n<i>–ü—Ä–∏–∫–ª–∞–¥:</i> {$word->example}";
        }

        $replyMarkup = [
            'inline_keyboard' => [
                [
                    [
                        'text' => '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
                        'callback_data' => "edit_{$word->id}"
                    ],
                    [
                        'text' => 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏',
                        'callback_data' => "delete_{$word->id}"
                    ],
                    [
                        'text' => '‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥',
                        'callback_data' => "addexample_{$word->id}"
                    ]
                ]
            ]
        ];

        Http::post($url, [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode($replyMarkup),
        ]);
    }

    public function deleteWord($chatId, $wordId, $messageId)
    {
        $word = Word::find($wordId);
        if ($word) {
            $word->delete();
            $this->editMessage($chatId, $messageId, "–°–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
        } else {
            $this->editMessage($chatId, $messageId, "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    public function promptEditWord($chatId, $wordId)
    {
        $word = Word::find($wordId);
        if ($word) {
            $text = "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞ <b>{$word->word}</b>:";
            $this->sendMessage($chatId, $text, null, 'HTML');
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            Cache::put("edit_word_{$chatId}", $wordId, now()->addMinutes(5));
        } else {
            $this->sendMessage($chatId, "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    public function promptAddExample($chatId, $wordId)
    {
        $word = Word::find($wordId);
        if ($word) {
            $text = "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ —Ä–µ—á–µ–Ω–Ω—è –¥–ª—è —Å–ª–æ–≤–∞ <b>{$word->word}</b>:";
            $this->sendMessage($chatId, $text, null, 'HTML');
            Cache::put("add_example_{$chatId}", $wordId, now()->addMinutes(5));
        } else {
            $this->sendMessage($chatId, "–°–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    private function editMessage($chatId, $messageId, $text)
    {
        $token = env('TELEGRAM_BOT_TOKEN');
        $url = "https://api.telegram.org/bot{$token}/editMessageText";

        Http::post($url, [
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $text,
            'parse_mode' => 'HTML',
        ]);
    }

    private function sendMessage($chatId, $text, $keyboard = null, $parseMode = null)
    {
        $token = env('TELEGRAM_BOT_TOKEN');
        $url = "https://api.telegram.org/bot{$token}/sendMessage";

        $payload = [
            'chat_id' => $chatId,
            'text' => $text,
        ];

        if ($keyboard) {
            $payload['reply_markup'] = json_encode($keyboard);
        }
        if ($parseMode) {
            $payload['parse_mode'] = $parseMode;
        }

        Http::post($url, $payload);
    }
}
